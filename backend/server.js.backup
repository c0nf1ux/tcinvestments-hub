const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;

// Database connection
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/brainstorm', {
 useNewUrlParser: true,
 useUnifiedTopology: true,
})
.then(() => console.log(' MongoDB connected successfully'))
.catch(err => console.log(' MongoDB connection error:', err.message));

// Middleware
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Routes
app.use('/api/auth', require('./routes/auth'));
app.use('/api', require('./routes/api'));

// Root route
app.get('/', (req, res) => {
 res.json({ 
   message: 'Brainstorm Trading Card Investment Platform API',
   version: '2.0.0',
   status: 'operational',
   features: ['Authentication', 'Real API Integration', 'Multi-TCG Search'],
   endpoints: [
     'POST /api/auth/register',
     'POST /api/auth/login', 
     'GET /api/auth/profile (protected)',
     'PUT /api/auth/profile (protected)',
     'GET /api/health',
     'GET /api/cards/search?query=cardname&game=magic|pokemon|sports|all',
     'POST /api/cards/prices',
     'GET /api/collections'
   ]
 });
});

// 404 handler
app.use('*', (req, res) => {
 res.status(404).json({ error: 'Route not found' });
});

// Error handling middleware
app.use((err, req, res, next) => {
 console.error('Server Error:', err.stack);
 res.status(500).json({ 
   error: 'Internal server error',
   message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong!'
 });
});

app.listen(PORT, () => {
 console.log(` Brainstorm API Server running on port ${PORT}`);
 console.log(` Health check: http://localhost:${PORT}/api/health`);
 console.log(` Search endpoint: http://localhost:${PORT}/api/cards/search`);
 console.log(` Auth endpoints: http://localhost:${PORT}/api/auth/login`);
 console.log(` Database: ${mongoose.connection.readyState === 1 ? 'Connected' : 'Connecting...'}`);
});
